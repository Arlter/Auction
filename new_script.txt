DROP database auction;
CREATE database auction;
SET time_zone='+00:00';

CREATE TABLE IF NOT EXISTS Account (
	accountID INT NOT NULL AUTO_INCREMENT, 
	accountUsername VARCHAR(20) NOT NULL,
	accountPassword VARCHAR(60) NOT NULL,
	accountType VARCHAR(10) NOT NULL,
	firstName VARCHAR(20) NOT NULL,
	lastName  VARCHAR(20) NOT NULL, 
	emailAddress VARCHAR(50) NOT NULL,
	phoneNumber VARCHAR(20) NOT NULL,
	PRIMARY KEY(accountID)
);
ALTER TABLE Account AUTO_INCREMENT=10000000;


CREATE TABLE IF NOT EXISTS Category (
	categoryName VARCHAR(40),
   	PRIMARY KEY(categoryName)
);

CREATE TABLE IF NOT EXISTS Auction (
	auctionID INT NOT NULL AUTO_INCREMENT,
	itemName VARCHAR(40) NOT NULL,
	itemDescription VARCHAR(2000) NOT NULL,
	categoryName VARCHAR(40) NOT NULL,
	seller_accountID INT NOT NULL,
	startingPrice DECIMAL(10,2) NOT NULL,
	reservePrice DECIMAL(10,2) DEFAULT 0 NOT NULL,
	createdDate TIMESTAMP NOT NULL,
	endDate TIMESTAMP NOT NULL,
	currentPrice DECIMAL(10,2) DEFAULT 0 NOT NULL,
	currentBidder INT, 
	outcomeNotificationStatus BOOLEAN NOT NULL DEFAULT TRUE,	
	PRIMARY KEY(auctionID),
	FOREIGN KEY(seller_accountID) REFERENCES Account(accountID) ON UPDATE CASCADE,
	FOREIGN KEY(categoryName) REFERENCES Category(categoryName) ON UPDATE CASCADE
);

ALTER TABLE Auction AUTO_INCREMENT=100000000;

CREATE TABLE IF NOT EXISTS Bid (
	bidID INT NOT NULL AUTO_INCREMENT,
	auction_auctionID INT NOT NULL,
	bidPrice DECIMAL(10,2) NOT NULL,
	buyer_accountID INT NOT NULL,
	bidTime TIMESTAMP NOT NULL,
	PRIMARY KEY(bidID),
	FOREIGN KEY(auction_auctionID) REFERENCES Auction(auctionID) ON UPDATE CASCADE,
	FOREIGN KEY(buyer_accountID) REFERENCES Account(accountID) ON UPDATE CASCADE
   );
ALTER TABLE Bid AUTO_INCREMENT=0;

CREATE TABLE IF NOT EXISTS BuyerWatchAuction (
	auction_auctionID INT NOT NULL,
	buyer_accountID INT NOT NULL,
	PRIMARY KEY(auction_auctionID, buyer_accountID),
	FOREIGN KEY(auction_auctionID) REFERENCES Auction(auctionID) ON UPDATE CASCADE,
	FOREIGN KEY(buyer_accountID) REFERENCES Account(accountID) ON UPDATE CASCADE
   
);

delimiter $$
CREATE TRIGGER  Auction_bid_audit Before INSERT ON Bid 
	FOR EACH ROW
	BEGIN
		IF EXISTS (SELECT * FROM Auction WHERE auctionID=new.auction_auctionID and currentPrice<new.bidPrice) OR EXISTS (SELECT * FROM Auction WHERE auctionID=new.auction_auctionID and new.bidPrice=currentPrice and startingPrice=currentPrice )  THEN
			UPDATE Auction SET currentPrice = new.bidPrice, currentBidder= new.buyer_accountID WHERE auctionID= new.auction_auctionID;
		ELSE
			SIGNAL SQLSTATE '45OO0' SET MESSAGE_TEXT = 'The submitted bid price is lower than the current bid price. Please try another';
		END IF;
	END $$
delimiter ;

delimiter $$
CREATE TRIGGER  Auction_default_setup BEFORE INSERT ON Auction 
	FOR EACH ROW
	BEGIN
		IF new.reservePrice = 0 THEN
			SET new.currentPrice = new.startingPrice, new.reservePrice = new.startingPrice ;
		ELSE
			SET new.currentPrice = new.startingPrice;
		END IF;
	END $$
delimiter ;


delimiter $$
CREATE TRIGGER  Auto_Watchlist After INSERT ON Bid 
	FOR EACH ROW
	BEGIN
		IF NOT EXISTS (SELECT * FROM BuyerWatchAuction WHERE auction_auctionID = new.auction_auctionID and buyer_accountID=new.buyer_accountID) THEN
			INSERT INTO BuyerWatchAuction VALUES(new.auction_auctionID,new.buyer_accountID);
		END IF;
	END $$
delimiter ;

USE auction;

INSERT INTO Account VALUES
(null,'acc1','$2y$10$/K9uiV.po8OJBjU3WZvGAeGbZYr7Ny2bHFbQjdDLXlpB3cGjo3FTa','buyer','erte','wang','1419121502@qq.com','+44123456'),
(null,'acc2','$2y$10$/K9uiV.po8OJBjU3WZvGAeGbZYr7Ny2bHFbQjdDLXlpB3cGjo3FTa','seller','kien','han','648906549@qq.com','+44123456'),
(null,'acc3','$2y$10$/K9uiV.po8OJBjU3WZvGAeGbZYr7Ny2bHFbQjdDLXlpB3cGjo3FTa','buyer','angel','lam','wangertee@126.com','+44123456'),
(null,'acc4','$2y$10$/K9uiV.po8OJBjU3WZvGAeGbZYr7Ny2bHFbQjdDLXlpB3cGjo3FTa','seller','tim','chen','abc@com','+44123456')
;

INSERT INTO Category VALUES
("electronic device"),
("beauty makeup"),
("food"),
("toy")
;

INSERT INTO Auction VALUES
(DEFAULT,'water gun','purchased two months ago and used twice. Very new','toy',10000001,52,DEFAULT,CURRENT_TIME(),TIMESTAMP("2022-11-20", "11:54:00"),DEFAULT,null,TRUE),
(DEFAULT,'iphone','purchased two months ago and used twice. Very new','electronic device',10000001,700,701,CURRENT_TIME(),TIMESTAMP("2022-11-30", "14:00:00"),DEFAULT,null,TRUE),
(DEFAULT,'milk','purchased one day ago. Very new','food',10000001,3,DEFAULT,CURRENT_TIME(),TIMESTAMP("2022-11-9", "9:00:00"),DEFAULT,null,TRUE)
;

INSERT INTO Bid VALUES
(DEFAULT,100000000,70.00,10000000,'2022-11-08 23:57:37'),
(DEFAULT,100000000,80.00,10000000,'2022-11-09 00:02:01'),
(DEFAULT,100000000,99.00,10000000,'2022-11-09 00:19:20'),
(DEFAULT,100000002,4.00,10000000,'2022-11-09 02:30:20'),
(DEFAULT,100000000,101.00,10000000,'2022-11-09 02:30:20')
;




-- create procedure that calculates and inputs cosine similarities into the relevant table created
DROP PROCEDURE IF EXISTS get_similarities;

DELIMITER $$
CREATE PROCEDURE get_similarities(recommendations_accountID INT)
BEGIN
DECLARE buyer_h INT;
DECLARE done INT DEFAULT FALSE;
DECLARE my_cursor CURSOR FOR SELECT buyer_accountID FROM similarity WHERE buyer_accountID != recommendations_accountID;
DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;
OPEN my_cursor;
	get_similarity: LOOP
		FETCH NEXT FROM my_cursor INTO buyer_h;
        IF done = TRUE THEN
			LEAVE get_similarity;
		END IF;
		
		IF ((SELECT COUNT(*) FROM table_2) != 0) AND ((SELECT COUNT(table_1.auction_auctionID) FROM table_1 WHERE buyer_accountID = buyer_h) != 0)
		THEN
			BEGIN
				DROP TEMPORARY TABLE IF EXISTS buyer_h_auctions;
				
				CREATE TEMPORARY TABLE buyer_h_auctions
				SELECT DISTINCT auction_auctionID AS buyer_h_auctionID
				FROM table_1
				WHERE buyer_accountID = buyer_h;
				
				DROP TEMPORARY TABLE IF EXISTS intersect_auctions;
				
				CREATE TEMPORARY TABLE intersect_auctions
				SELECT buyer_h_auctionID FROM buyer_h_auctions
				WHERE buyer_h_auctionID IN(SELECT * FROM table_2);
				
				INSERT INTO similarity VALUES(buyer_h,
				(SELECT COUNT(*) FROM intersect_auctions) /(((SELECT SQRT(COUNT(*)) FROM table_2))*(SELECT SQRT(COUNT(*)) FROM buyer_h_auctions)) );
			END;
		END IF;
        SET done = FALSE;
	END LOOP;
	
CLOSE my_cursor;
END $$
DELIMITER ;




-- create procedure to get recommendations
DROP PROCEDURE IF EXISTS get_recommendations;

DELIMITER //
CREATE PROCEDURE get_recommendations()
BEGIN
	-- get active auctions
	DROP TEMPORARY TABLE IF EXISTS table_active_auctions;

	CREATE TEMPORARY TABLE table_active_auctions
	SELECT auctionID
	FROM auction
	WHERE outcomeNotificationStatus = TRUE;
	
	-- get k most similar users
	DROP TEMPORARY TABLE IF EXISTS table_k_users;

	CREATE TEMPORARY TABLE table_k_users
	SELECT buyer_accountID
	FROM similarity ORDER BY similarity.cosine_similarity DESC LIMIT 5;

	-- get auctions that k most similar users have participated in
	DROP TEMPORARY TABLE IF EXISTS table_k_users_auctions;

	CREATE TEMPORARY TABLE table_k_users_auctions
	SELECT DISTINCT auction_auctionID
	FROM bid
	WHERE bid.buyer_accountID IN(SELECT * FROM table_k_users);

	-- get auctions that k most similar users have participated in, that our user has not participated in
	DROP TEMPORARY TABLE IF EXISTS table_k_users_auctions_new;

	CREATE TEMPORARY TABLE table_k_users_auctions_new
	SELECT DISTINCT auction_auctionID
	FROM table_k_users_auctions
	WHERE auction_auctionID NOT IN(SELECT * FROM table_2);

	-- get auctions that k most similar users have participated in, that our user has not participated in, and that are active
	DROP TEMPORARY TABLE IF EXISTS table_k_users_auctions_new_active;

	CREATE TEMPORARY TABLE table_k_users_auctions_new_active
	SELECT auction_auctionID
	FROM table_k_users_auctions_new
	WHERE auction_auctionID IN(SELECT * FROM table_active_auctions);

END //
DELIMITER ;




-- create procedure to get recommendations
DROP PROCEDURE IF EXISTS collaborative_filtering;
DELIMITER //
CREATE PROCEDURE collaborative_filtering(recommendations_accountID_1 INT)
BEGIN
	-- creates a table showing unique auction ID, buyer account ID pairs
	DROP TEMPORARY TABLE IF EXISTS table_1;

	CREATE TEMPORARY TABLE table_1
	SELECT DISTINCT auction_auctionID, buyer_accountID
	FROM bid;

	-- creates a table of all auction IDs that the user is involved in
	DROP TEMPORARY TABLE IF EXISTS table_2;

	CREATE TEMPORARY TABLE table_2
	SELECT auction_auctionID
	FROM table_1
	WHERE buyer_accountID = recommendations_accountID_1;

	-- create table to store cosine similarities with other users
	DROP TEMPORARY TABLE IF EXISTS similarity;

	CREATE TEMPORARY TABLE similarity
	SELECT DISTINCT buyer_accountID
	FROM bid
	WHERE buyer_accountID != recommendations_accountID_1;

	ALTER TABLE similarity ADD cosine_similarity FLOAT(10);

	-- call procedure REQUIRES THE BUYER'S ACCOUNT ID AS INPUT
	CALL get_similarities(recommendations_accountID_1);

	-- drop entries with null in the cosine similarities column
	DELETE FROM similarity WHERE cosine_similarity IS NULL;

	IF (SELECT COUNT(*) FROM similarity) != 0
	THEN
	-- call procedure and return results
		CALL get_recommendations();
		
		DROP TEMPORARY TABLE IF EXISTS num_bid_auctions;
		CREATE TEMPORARY TABLE num_bids_auctions
		SELECT auction_auctionID, COUNT(*) AS num_bids
		FROM bid
		GROUP BY auction_auctionID;
				
		DROP TEMPORARY TABLE IF EXISTS res;
		CREATE TEMPORARY TABLE res
		SELECT auctionID, itemName, itemDescription, currentPrice, endDate 
		FROM auction WHERE auctionID IN(SELECT auction_auctionID FROM table_k_users_auctions_new_active);

		ALTER TABLE res ADD num_bids INT AFTER currentPrice;

		SELECT res.auctionID, res.itemName, res.itemDescription, res.currentPrice, num_bids_auctions.num_bids, res.endDate
		FROM res
		INNER JOIN num_bids_auctions
		ON res.auctionID = num_bids_auctions.auction_auctionID;
	ELSE
		-- (included just to be safe) return empty table with same number of cols to return expected number of arguments for php
		DROP TEMPORARY TABLE IF EXISTS res;
		CREATE TEMPORARY TABLE IF NOT EXISTS res (
			auctionID INT, 
			itemName VARCHAR(40),
			itemDescription VARCHAR(2000),
			currentPrice DECIMAL(10,2),
			num_bids INT,
			endDate TIMESTAMP, 
			PRIMARY KEY(auctionID)
		);
		SELECT * FROM res;
	END IF;

END //
DELIMITER ;